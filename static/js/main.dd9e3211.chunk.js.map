{"version":3,"sources":["MainScreen.js","serviceWorker.js","index.js"],"names":["AlignedText","styled","div","MainScreen","props","state","heroes","draft","fetch","then","res","json","result","setState","performDraft","mappedHeroes","int","str","agi","this","forEach","hero","heroAttribute","push","Object","values","map","randomSample","path","items","Math","floor","random","length","Spinner","style","width","height","renderedHeroes","Col","key","Card","CardImg","top","src","convertToApiPath","alt","CardBody","CardTitle","CardSubtitle","CardText","join","Container","marginTop","marginBottom","Row","Button","color","onClick","React","Component","Boolean","window","location","hostname","match","Main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2eAKA,IAAMA,EAAcC,IAAOC,IAAV,KAwFFC,E,YAjFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,GACRC,MAAO,IAIXC,MAAM,0CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACNP,OAAQM,IAEhB,EAAKE,kBAdE,E,4EAkBH,IAAD,OAEPC,EAAe,CAACC,IAAK,GAAIC,IAAK,GAAIC,IAAK,IAC3CC,KAAKd,MAAMC,OAAOc,SAAQ,SAAAC,GACtB,IAAMC,EAAgBD,EAAI,aAC1BN,EAAaO,GAAeC,KAAKF,MAGrCF,KAAKN,SAAS,CAEVN,MAAOiB,OAAOC,OAAOV,GAAcW,KAAI,SAAApB,GAAM,OAAI,EAAKqB,aAAarB,U,uCAI1DsB,GACb,MAAO,2BAA6BA,I,mCAG3BC,GACT,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,W,+BAGxC,IAAD,OAGL,KADkBd,KAAKd,MAAMC,OAAO2B,OAAS,GAEzC,OACI,kBAACjC,EAAD,KACI,iDACA,kBAACkC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAMrD,IAAMC,EAAiBnB,KAAKd,MAAME,MAC7BmB,KAAI,SAAAL,GAAI,OACL,kBAACkB,EAAA,EAAD,CAAKC,IAAKnB,EAAI,IACV,kBAACoB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACP,MAAM,OAAOQ,IAAK,EAAKC,iBAAiBxB,EAAI,KAAUyB,IAAI,eACvE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAW,4BAAK3B,EAAI,iBACpB,kBAAC4B,EAAA,EAAD,KAAe5B,EAAI,YAAkB,IAAMA,EAAI,cAC/C,kBAAC6B,EAAA,EAAD,KAAW,UAAY7B,EAAI,MAAU8B,KAAK,aAM9D,OACI,kBAACnD,EAAD,KACI,oDACA,kBAACoD,EAAA,EAAD,CAAWjB,MAAO,CAACkB,UAAW,OAAQC,aAAc,SAChD,kBAACC,EAAA,EAAD,KACKjB,IAGT,kBAACkB,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAM,EAAK5C,iBAA5C,+B,GA5ES6C,IAAMC,W,YCCXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qICVN,IAAMC,EAAOjE,IAAOC,IAAV,KAKViE,IAASC,OACD,kBAACF,EAAD,KACI,kBAAC,EAAD,OAGRG,SAASC,eAAe,SD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.dd9e3211.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner, Button, Container, Row, Col, Card, CardImg, CardText, CardBody, CardTitle,\r\n    CardSubtitle } from 'reactstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst AlignedText = styled.div`\r\n  text-align: center;\r\n  vertical-align: middle;\r\n`;\r\n\r\n\r\nclass MainScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heroes: [],\r\n            draft: []\r\n        };\r\n\r\n        // Fetch heroes from API, then perform first draft\r\n        fetch(\"https://api.opendota.com/api/heroStats\")\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.setState({\r\n                        heroes: result\r\n                });\r\n                this.performDraft();\r\n            });\r\n    }\r\n\r\n    performDraft() {\r\n        // Split heroes based on main attribute\r\n        let mappedHeroes = {int: [], str: [], agi: []};\r\n        this.state.heroes.forEach(hero => {\r\n            const heroAttribute = hero['primary_attr'];\r\n            mappedHeroes[heroAttribute].push(hero)\r\n        });\r\n\r\n        this.setState({\r\n            // Sample one hero from each attribute type\r\n            draft: Object.values(mappedHeroes).map(heroes => this.randomSample(heroes))\r\n        });\r\n    }\r\n\r\n    convertToApiPath(path) {\r\n        return \"https://api.opendota.com\" + path\r\n    }\r\n\r\n    randomSample(items){\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n\r\n    render() {\r\n        // Show loading screen\r\n        const hasLoaded = this.state.heroes.length > 0;\r\n        if (!hasLoaded) {\r\n            return (\r\n                <AlignedText>\r\n                    <h1>Loading heroes...</h1>\r\n                    <Spinner style={{ width: '2rem', height: '2rem' }} />\r\n                </AlignedText>\r\n            )\r\n        }\r\n\r\n        // Heroes have been loaded - render\r\n        const renderedHeroes = this.state.draft\r\n            .map(hero =>\r\n                <Col key={hero['id']}>\r\n                    <Card>\r\n                        <CardImg top width=\"100%\" src={this.convertToApiPath(hero['img'])} alt=\"hero image\" />\r\n                        <CardBody>\r\n                            <CardTitle><h3>{hero['localized_name']}</h3></CardTitle>\r\n                            <CardSubtitle>{hero['attack_type'] + \" \" + hero['primary_attr']}</CardSubtitle>\r\n                            <CardText>{\"roles: \" + hero['roles'].join(\", \")}</CardText>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n\r\n        return (\r\n            <AlignedText>\r\n                <h1>You have been given:</h1>\r\n                <Container style={{marginTop: \"20px\", marginBottom: \"50px\"}}>\r\n                    <Row>\r\n                        {renderedHeroes}\r\n                    </Row>\r\n                </Container>\r\n                <Button color=\"primary\" onClick={() => this.performDraft()}>Roll the dice again...</Button>\r\n            </AlignedText>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainScreen\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainScreen from './MainScreen';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styled from 'styled-components';\nimport * as serviceWorker from './serviceWorker';\n\nconst Main = styled.div`\n  max-width: 1024px;\n  margin: 0 auto; // Center in website\n`;\n\nReactDOM.render((\n        <Main>\n            <MainScreen/>\n        </Main>\n    ),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}